/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v3 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a multiple batch events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AnalyticsBatchCreateEventResponse</returns>
        AnalyticsBatchCreateEventResponse AnalyticsBatchCreateAppEvents(AnalyticsBatchCreateAppEventRequest body);

        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a multiple batch events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AnalyticsBatchCreateEventResponse</returns>
        ApiResponse<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateAppEventsWithHttpInfo(AnalyticsBatchCreateAppEventRequest body);
        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create multiple user events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>AnalyticsBatchCreateEventResponse</returns>
        AnalyticsBatchCreateEventResponse AnalyticsBatchCreateUserEvents(string token, AnalyticsBatchCreateUserEventRequest body);

        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create multiple user events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AnalyticsBatchCreateEventResponse</returns>
        ApiResponse<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateUserEventsWithHttpInfo(string token, AnalyticsBatchCreateUserEventRequest body);
        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a new app event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AnalyticsCreateAppEvent(string eventName, CreateAppEventRequest body);

        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a new app event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsCreateAppEventWithHttpInfo(string eventName, CreateAppEventRequest body);
        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create a new user event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AnalyticsCreateUserEvent(string eventName, string token, CreateUserEventRequest body);

        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create a new user event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AnalyticsCreateUserEventWithHttpInfo(string eventName, string token, CreateUserEventRequest body);
        /// <summary>
        /// Server Time
        /// </summary>
        /// <remarks>
        /// Gets Server Time
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AnalyticsServerTime</returns>
        AnalyticsServerTime AnalyticsGetServerTime();

        /// <summary>
        /// Server Time
        /// </summary>
        /// <remarks>
        /// Gets Server Time
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AnalyticsServerTime</returns>
        ApiResponse<AnalyticsServerTime> AnalyticsGetServerTimeWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a multiple batch events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsBatchCreateEventResponse</returns>
        System.Threading.Tasks.Task<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateAppEventsAsync(AnalyticsBatchCreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a multiple batch events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsBatchCreateEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsBatchCreateEventResponse>> AnalyticsBatchCreateAppEventsWithHttpInfoAsync(AnalyticsBatchCreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create multiple user events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsBatchCreateEventResponse</returns>
        System.Threading.Tasks.Task<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateUserEventsAsync(string token, AnalyticsBatchCreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create multiple user events
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsBatchCreateEventResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsBatchCreateEventResponse>> AnalyticsBatchCreateUserEventsWithHttpInfoAsync(string token, AnalyticsBatchCreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a new app event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsCreateAppEventAsync(string eventName, CreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// App Events
        /// </summary>
        /// <remarks>
        /// Create a new app event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsCreateAppEventWithHttpInfoAsync(string eventName, CreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create a new user event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AnalyticsCreateUserEventAsync(string eventName, string token, CreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Events
        /// </summary>
        /// <remarks>
        /// Create a new user event
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AnalyticsCreateUserEventWithHttpInfoAsync(string eventName, string token, CreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Server Time
        /// </summary>
        /// <remarks>
        /// Gets Server Time
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsServerTime</returns>
        System.Threading.Tasks.Task<AnalyticsServerTime> AnalyticsGetServerTimeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Server Time
        /// </summary>
        /// <remarks>
        /// Gets Server Time
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsServerTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsServerTime>> AnalyticsGetServerTimeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsServiceApi : IAnalyticsServiceApiSync, IAnalyticsServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsServiceApi : IDisposable, IAnalyticsServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AnalyticsServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AnalyticsServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AnalyticsServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AnalyticsServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// App Events Create a multiple batch events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AnalyticsBatchCreateEventResponse</returns>
        public AnalyticsBatchCreateEventResponse AnalyticsBatchCreateAppEvents(AnalyticsBatchCreateAppEventRequest body)
        {
            Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> localVarResponse = AnalyticsBatchCreateAppEventsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Events Create a multiple batch events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AnalyticsBatchCreateEventResponse</returns>
        public Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateAppEventsWithHttpInfo(AnalyticsBatchCreateAppEventRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsBatchCreateAppEvents");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AnalyticsBatchCreateEventResponse>("/v1/analytics/batch/app-events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsBatchCreateAppEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Events Create a multiple batch events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsBatchCreateEventResponse</returns>
        public async System.Threading.Tasks.Task<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateAppEventsAsync(AnalyticsBatchCreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AnalyticsBatchCreateAppEventsWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Events Create a multiple batch events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsBatchCreateEventResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse>> AnalyticsBatchCreateAppEventsWithHttpInfoAsync(AnalyticsBatchCreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsBatchCreateAppEvents");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AnalyticsBatchCreateEventResponse>("/v1/analytics/batch/app-events", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsBatchCreateAppEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Events Create multiple user events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>AnalyticsBatchCreateEventResponse</returns>
        public AnalyticsBatchCreateEventResponse AnalyticsBatchCreateUserEvents(string token, AnalyticsBatchCreateUserEventRequest body)
        {
            Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> localVarResponse = AnalyticsBatchCreateUserEventsWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Events Create multiple user events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AnalyticsBatchCreateEventResponse</returns>
        public Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateUserEventsWithHttpInfo(string token, AnalyticsBatchCreateUserEventRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AnalyticsServiceApi->AnalyticsBatchCreateUserEvents");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsBatchCreateUserEvents");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AnalyticsBatchCreateEventResponse>("/v1/analytics/batch/user-events", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsBatchCreateUserEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Events Create multiple user events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsBatchCreateEventResponse</returns>
        public async System.Threading.Tasks.Task<AnalyticsBatchCreateEventResponse> AnalyticsBatchCreateUserEventsAsync(string token, AnalyticsBatchCreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AnalyticsBatchCreateUserEventsWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Events Create multiple user events
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsBatchCreateEventResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AnalyticsBatchCreateEventResponse>> AnalyticsBatchCreateUserEventsWithHttpInfoAsync(string token, AnalyticsBatchCreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AnalyticsServiceApi->AnalyticsBatchCreateUserEvents");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsBatchCreateUserEvents");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AnalyticsBatchCreateEventResponse>("/v1/analytics/batch/user-events", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsBatchCreateUserEvents", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Events Create a new app event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AnalyticsCreateAppEvent(string eventName, CreateAppEventRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = AnalyticsCreateAppEventWithHttpInfo(eventName, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Events Create a new app event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> AnalyticsCreateAppEventWithHttpInfo(string eventName, CreateAppEventRequest body)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsServiceApi->AnalyticsCreateAppEvent");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsCreateAppEvent");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_name", Snapser.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/analytics/app-events/{event_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsCreateAppEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// App Events Create a new app event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsCreateAppEventAsync(string eventName, CreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AnalyticsCreateAppEventWithHttpInfoAsync(eventName, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// App Events Create a new app event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> AnalyticsCreateAppEventWithHttpInfoAsync(string eventName, CreateAppEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsServiceApi->AnalyticsCreateAppEvent");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsCreateAppEvent");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_name", Snapser.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/analytics/app-events/{event_name}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsCreateAppEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Events Create a new user event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AnalyticsCreateUserEvent(string eventName, string token, CreateUserEventRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = AnalyticsCreateUserEventWithHttpInfo(eventName, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Events Create a new user event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> AnalyticsCreateUserEventWithHttpInfo(string eventName, string token, CreateUserEventRequest body)
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsServiceApi->AnalyticsCreateUserEvent");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AnalyticsServiceApi->AnalyticsCreateUserEvent");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsCreateUserEvent");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_name", Snapser.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/analytics/user-events/{event_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsCreateUserEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Events Create a new user event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AnalyticsCreateUserEventAsync(string eventName, string token, CreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AnalyticsCreateUserEventWithHttpInfoAsync(eventName, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Events Create a new user event
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventName">Event to be added</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> AnalyticsCreateUserEventWithHttpInfoAsync(string eventName, string token, CreateUserEventRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventName' is set
            if (eventName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'eventName' when calling AnalyticsServiceApi->AnalyticsCreateUserEvent");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AnalyticsServiceApi->AnalyticsCreateUserEvent");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AnalyticsServiceApi->AnalyticsCreateUserEvent");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("event_name", Snapser.Client.ClientUtils.ParameterToString(eventName)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/analytics/user-events/{event_name}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsCreateUserEvent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Server Time Gets Server Time
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AnalyticsServerTime</returns>
        public AnalyticsServerTime AnalyticsGetServerTime()
        {
            Snapser.Client.ApiResponse<AnalyticsServerTime> localVarResponse = AnalyticsGetServerTimeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Server Time Gets Server Time
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AnalyticsServerTime</returns>
        public Snapser.Client.ApiResponse<AnalyticsServerTime> AnalyticsGetServerTimeWithHttpInfo()
        {
            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<AnalyticsServerTime>("/v1/analytics/server-time", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsGetServerTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Server Time Gets Server Time
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsServerTime</returns>
        public async System.Threading.Tasks.Task<AnalyticsServerTime> AnalyticsGetServerTimeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AnalyticsGetServerTimeWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AnalyticsServerTime> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AnalyticsServerTime> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Server Time Gets Server Time
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsServerTime)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AnalyticsServerTime>> AnalyticsGetServerTimeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AnalyticsServerTime>("/v1/analytics/server-time", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyticsGetServerTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
