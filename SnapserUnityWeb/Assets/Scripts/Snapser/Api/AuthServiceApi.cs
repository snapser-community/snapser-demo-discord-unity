/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAnonLoginResponse</returns>
        AuthAnonLoginResponse AnonLogin(AuthAnonLoginRequest body);

        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAnonLoginResponse</returns>
        ApiResponse<AuthAnonLoginResponse> AnonLoginWithHttpInfo(AuthAnonLoginRequest body);
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiHttpBody</returns>
        ApiHttpBody AppVerify(string type, string sessionToken = default(string), string clientSecret = default(string));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiResponse of ApiHttpBody</returns>
        ApiResponse<ApiHttpBody> AppVerifyWithHttpInfo(string type, string sessionToken = default(string), string clientSecret = default(string));
        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAppleLoginResponse</returns>
        AuthAppleLoginResponse AppleLogin(AuthAppleLoginRequest body);

        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAppleLoginResponse</returns>
        ApiResponse<AuthAppleLoginResponse> AppleLoginWithHttpInfo(AuthAppleLoginRequest body);
        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AssociateLogins(AuthAssociateLoginsRequest body);

        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssociateLoginsWithHttpInfo(AuthAssociateLoginsRequest body);
        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object DisassociateLogin(string userId, string token, DisassociateLoginRequest body);

        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DisassociateLoginWithHttpInfo(string userId, string token, DisassociateLoginRequest body);
        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthDiscordLoginResponse</returns>
        AuthDiscordLoginResponse DiscordLogin(AuthDiscordLoginRequest body);

        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthDiscordLoginResponse</returns>
        ApiResponse<AuthDiscordLoginResponse> DiscordLoginWithHttpInfo(AuthDiscordLoginRequest body);
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailLoginResponse</returns>
        AuthEmailLoginResponse EmailLogin(AuthEmailLoginRequest body);

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailLoginResponse</returns>
        ApiResponse<AuthEmailLoginResponse> EmailLoginWithHttpInfo(AuthEmailLoginRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailPasswordLoginResponse</returns>
        AuthEmailPasswordLoginResponse EmailPasswordLogin(AuthEmailPasswordLoginRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailPasswordLoginResponse</returns>
        ApiResponse<AuthEmailPasswordLoginResponse> EmailPasswordLoginWithHttpInfo(AuthEmailPasswordLoginRequest body);
        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEpicLoginResponse</returns>
        AuthEpicLoginResponse EpicLogin(AuthEpicLoginRequest body);

        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEpicLoginResponse</returns>
        ApiResponse<AuthEpicLoginResponse> EpicLoginWithHttpInfo(AuthEpicLoginRequest body);
        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthFacebookLoginResponse</returns>
        AuthFacebookLoginResponse FacebookLogin(AuthFacebookLoginRequest body);

        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthFacebookLoginResponse</returns>
        ApiResponse<AuthFacebookLoginResponse> FacebookLoginWithHttpInfo(AuthFacebookLoginRequest body);
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>AuthGetUsernameAvailabilityResponse</returns>
        AuthGetUsernameAvailabilityResponse GetUsernameAvailability(string username);

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>ApiResponse of AuthGetUsernameAvailabilityResponse</returns>
        ApiResponse<AuthGetUsernameAvailabilityResponse> GetUsernameAvailabilityWithHttpInfo(string username);
        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthGoogleLoginResponse</returns>
        AuthGoogleLoginResponse GoogleLogin(AuthGoogleLoginRequest body);

        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthGoogleLoginResponse</returns>
        ApiResponse<AuthGoogleLoginResponse> GoogleLoginWithHttpInfo(AuthGoogleLoginRequest body);
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <returns>Object</returns>
        Object Logout(string token, string token2);

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LogoutWithHttpInfo(string token, string token2);
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object Otp(AuthOtpRequest body);

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OtpWithHttpInfo(AuthOtpRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object RecoverEmailAccount(AuthRecoverEmailAccountRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RecoverEmailAccountWithHttpInfo(AuthRecoverEmailAccountRequest body);
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>AuthRefreshResponse</returns>
        AuthRefreshResponse Refresh(string token, AuthRefreshRequest body);

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthRefreshResponse</returns>
        ApiResponse<AuthRefreshResponse> RefreshWithHttpInfo(string token, AuthRefreshRequest body);
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        [Obsolete]
        AuthSteamLoginResponse SteamLogin(AuthSteamLoginRequest body);

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        [Obsolete]
        ApiResponse<AuthSteamLoginResponse> SteamLoginWithHttpInfo(AuthSteamLoginRequest body);
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        AuthSteamLoginResponse SteamOpenIdLogin(AuthSteamOpenIdLoginRequest body);

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        ApiResponse<AuthSteamLoginResponse> SteamOpenIdLoginWithHttpInfo(AuthSteamOpenIdLoginRequest body);
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        AuthSteamLoginResponse SteamSessionTicketLogin(AuthSteamSessionTicketLoginRequest body);

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        ApiResponse<AuthSteamLoginResponse> SteamSessionTicketLoginWithHttpInfo(AuthSteamSessionTicketLoginRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateEmailPassword(AuthUpdateEmailPasswordRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateEmailPasswordWithHttpInfo(AuthUpdateEmailPasswordRequest body);
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object UpdateUsernamePassword(string token, AuthUpdateUsernamePasswordRequest body);

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateUsernamePasswordWithHttpInfo(string token, AuthUpdateUsernamePasswordRequest body);
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthUsernamePasswordLoginResponse</returns>
        AuthUsernamePasswordLoginResponse UsernamePasswordLogin(AuthUsernamePasswordLoginRequest body);

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthUsernamePasswordLoginResponse</returns>
        ApiResponse<AuthUsernamePasswordLoginResponse> UsernamePasswordLoginWithHttpInfo(AuthUsernamePasswordLoginRequest body);
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthValidateResponse</returns>
        AuthValidateResponse Validate(AuthValidateRequest body);

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthValidateResponse</returns>
        ApiResponse<AuthValidateResponse> ValidateWithHttpInfo(AuthValidateRequest body);
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthVerifyEmailResponse</returns>
        AuthVerifyEmailResponse VerifyEmail(AuthVerifyEmailRequest body);

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthVerifyEmailResponse</returns>
        ApiResponse<AuthVerifyEmailResponse> VerifyEmailWithHttpInfo(AuthVerifyEmailRequest body);
        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthXboxLoginResponse</returns>
        AuthXboxLoginResponse XboxLogin(AuthXboxLoginRequest body);

        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthXboxLoginResponse</returns>
        ApiResponse<AuthXboxLoginResponse> XboxLoginWithHttpInfo(AuthXboxLoginRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAnonLoginResponse</returns>
        System.Threading.Tasks.Task<AuthAnonLoginResponse> AnonLoginAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAnonLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthAnonLoginResponse>> AnonLoginWithHttpInfoAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiHttpBody</returns>
        System.Threading.Tasks.Task<ApiHttpBody> AppVerifyAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Verifies the session token and returns appropriate response based on the type
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiHttpBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiHttpBody>> AppVerifyWithHttpInfoAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAppleLoginResponse</returns>
        System.Threading.Tasks.Task<AuthAppleLoginResponse> AppleLoginAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAppleLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthAppleLoginResponse>> AppleLoginWithHttpInfoAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssociateLoginsAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateLoginsWithHttpInfoAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DisassociateLoginAsync(string userId, string token, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disassociate
        /// </summary>
        /// <remarks>
        /// Disassociates the specified login from a user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisassociateLoginWithHttpInfoAsync(string userId, string token, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthDiscordLoginResponse</returns>
        System.Threading.Tasks.Task<AuthDiscordLoginResponse> DiscordLoginAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Discord Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the discord token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthDiscordLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthDiscordLoginResponse>> DiscordLoginWithHttpInfoAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEmailLoginResponse> EmailLoginAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEmailLoginResponse>> EmailLoginWithHttpInfoAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailPasswordLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEmailPasswordLoginResponse> EmailPasswordLoginAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailPasswordLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEmailPasswordLoginResponse>> EmailPasswordLoginWithHttpInfoAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEpicLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEpicLoginResponse> EpicLoginAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Epic Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the epic credentials specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEpicLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEpicLoginResponse>> EpicLoginWithHttpInfoAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthFacebookLoginResponse</returns>
        System.Threading.Tasks.Task<AuthFacebookLoginResponse> FacebookLoginAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthFacebookLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthFacebookLoginResponse>> FacebookLoginWithHttpInfoAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetUsernameAvailabilityResponse</returns>
        System.Threading.Tasks.Task<AuthGetUsernameAvailabilityResponse> GetUsernameAvailabilityAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Checks if the username is available
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetUsernameAvailabilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGetUsernameAvailabilityResponse>> GetUsernameAvailabilityWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGoogleLoginResponse</returns>
        System.Threading.Tasks.Task<AuthGoogleLoginResponse> GoogleLoginAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGoogleLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGoogleLoginResponse>> GoogleLoginWithHttpInfoAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LogoutAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OtpAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OtpWithHttpInfoAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RecoverEmailAccountAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Sends an email to the user for account recovery
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecoverEmailAccountWithHttpInfoAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthRefreshResponse</returns>
        System.Threading.Tasks.Task<AuthRefreshResponse> RefreshAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthRefreshResponse>> RefreshWithHttpInfoAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<AuthSteamLoginResponse> SteamLoginAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<AuthSteamLoginResponse>> SteamLoginWithHttpInfoAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        System.Threading.Tasks.Task<AuthSteamLoginResponse> SteamOpenIdLoginAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam open ID token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthSteamLoginResponse>> SteamOpenIdLoginWithHttpInfoAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        System.Threading.Tasks.Task<AuthSteamLoginResponse> SteamSessionTicketLoginAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Steam Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the steam session ticket specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthSteamLoginResponse>> SteamSessionTicketLoginWithHttpInfoAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateEmailPasswordAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Updates the email and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateEmailPasswordWithHttpInfoAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateUsernamePasswordAsync(string token, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Updates the username and password of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUsernamePasswordWithHttpInfoAsync(string token, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthUsernamePasswordLoginResponse</returns>
        System.Threading.Tasks.Task<AuthUsernamePasswordLoginResponse> UsernamePasswordLoginAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Username Password Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the username and password specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthUsernamePasswordLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthUsernamePasswordLoginResponse>> UsernamePasswordLoginWithHttpInfoAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthValidateResponse</returns>
        System.Threading.Tasks.Task<AuthValidateResponse> ValidateAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthValidateResponse>> ValidateWithHttpInfoAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthVerifyEmailResponse</returns>
        System.Threading.Tasks.Task<AuthVerifyEmailResponse> VerifyEmailAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Password Login
        /// </summary>
        /// <remarks>
        /// Verifies the email and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthVerifyEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthVerifyEmailResponse>> VerifyEmailWithHttpInfoAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthXboxLoginResponse</returns>
        System.Threading.Tasks.Task<AuthXboxLoginResponse> XboxLoginAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Xbox Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the xbox token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthXboxLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthXboxLoginResponse>> XboxLoginWithHttpInfoAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApi : IAuthServiceApiSync, IAuthServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthServiceApi : IDisposable, IAuthServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAnonLoginResponse</returns>
        public AuthAnonLoginResponse AnonLogin(AuthAnonLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = AnonLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAnonLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthAnonLoginResponse> AnonLoginWithHttpInfo(AuthAnonLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AnonLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthAnonLoginResponse>("/v1/auth/login/anon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAnonLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthAnonLoginResponse> AnonLoginAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AnonLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAnonLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthAnonLoginResponse>> AnonLoginWithHttpInfoAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AnonLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthAnonLoginResponse>("/v1/auth/login/anon", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiHttpBody</returns>
        public ApiHttpBody AppVerify(string type, string sessionToken = default(string), string clientSecret = default(string))
        {
            Snapser.Client.ApiResponse<ApiHttpBody> localVarResponse = AppVerifyWithHttpInfo(type, sessionToken, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <returns>ApiResponse of ApiHttpBody</returns>
        public Snapser.Client.ApiResponse<ApiHttpBody> AppVerifyWithHttpInfo(string type, string sessionToken = default(string), string clientSecret = default(string))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'type' when calling AuthServiceApi->AppVerify");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Snapser.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (sessionToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "session_token", sessionToken));
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "client_secret", clientSecret));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiHttpBody>("/v1/auth/app-verify/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppVerify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiHttpBody</returns>
        public async System.Threading.Tasks.Task<ApiHttpBody> AppVerifyAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppVerifyWithHttpInfoAsync(type, sessionToken, clientSecret, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<ApiHttpBody> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<ApiHttpBody> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Verifies the session token and returns appropriate response based on the type
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of app trying to verify the session token. Only acceptable value is &#39;photon&#39;</param>
        /// <param name="sessionToken">Session token of the user (optional)</param>
        /// <param name="clientSecret">Shared secret used to verify the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiHttpBody)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<ApiHttpBody>> AppVerifyWithHttpInfoAsync(string type, string sessionToken = default(string), string clientSecret = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'type' when calling AuthServiceApi->AppVerify");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("type", Snapser.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (sessionToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "session_token", sessionToken));
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "client_secret", clientSecret));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ApiHttpBody>("/v1/auth/app-verify/{type}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppVerify", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAppleLoginResponse</returns>
        public AuthAppleLoginResponse AppleLogin(AuthAppleLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = AppleLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAppleLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthAppleLoginResponse> AppleLoginWithHttpInfo(AuthAppleLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AppleLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthAppleLoginResponse>("/v1/auth/login/apple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAppleLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthAppleLoginResponse> AppleLoginAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AppleLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAppleLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthAppleLoginResponse>> AppleLoginWithHttpInfoAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AppleLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthAppleLoginResponse>("/v1/auth/login/apple", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AssociateLogins(AuthAssociateLoginsRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = AssociateLoginsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> AssociateLoginsWithHttpInfo(AuthAssociateLoginsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AssociateLogins");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/associate-logins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateLogins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssociateLoginsAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AssociateLoginsWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> AssociateLoginsWithHttpInfoAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AssociateLogins");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<Object>("/v1/auth/associate-logins", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateLogins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object DisassociateLogin(string userId, string token, DisassociateLoginRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = DisassociateLoginWithHttpInfo(userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> DisassociateLoginWithHttpInfo(string userId, string token, DisassociateLoginRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling AuthServiceApi->DisassociateLogin");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->DisassociateLogin");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->DisassociateLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/users/{user_id}/disassociation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisassociateLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DisassociateLoginAsync(string userId, string token, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DisassociateLoginWithHttpInfoAsync(userId, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disassociate Disassociates the specified login from a user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">UserID of the user to be unbanned</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> DisassociateLoginWithHttpInfoAsync(string userId, string token, DisassociateLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling AuthServiceApi->DisassociateLogin");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->DisassociateLogin");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->DisassociateLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/auth/users/{user_id}/disassociation", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisassociateLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthDiscordLoginResponse</returns>
        public AuthDiscordLoginResponse DiscordLogin(AuthDiscordLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthDiscordLoginResponse> localVarResponse = DiscordLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthDiscordLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthDiscordLoginResponse> DiscordLoginWithHttpInfo(AuthDiscordLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->DiscordLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthDiscordLoginResponse>("/v1/auth/discord/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiscordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthDiscordLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthDiscordLoginResponse> DiscordLoginAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DiscordLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthDiscordLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthDiscordLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Discord Login Logs in the user based on the discord token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthDiscordLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthDiscordLoginResponse>> DiscordLoginWithHttpInfoAsync(AuthDiscordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->DiscordLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthDiscordLoginResponse>("/v1/auth/discord/login", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DiscordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailLoginResponse</returns>
        public AuthEmailLoginResponse EmailLogin(AuthEmailLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = EmailLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthEmailLoginResponse> EmailLoginWithHttpInfo(AuthEmailLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EmailLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEmailLoginResponse>("/v1/auth/login/email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEmailLoginResponse> EmailLoginAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EmailLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthEmailLoginResponse>> EmailLoginWithHttpInfoAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EmailLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthEmailLoginResponse>("/v1/auth/login/email", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailPasswordLoginResponse</returns>
        public AuthEmailPasswordLoginResponse EmailPasswordLogin(AuthEmailPasswordLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthEmailPasswordLoginResponse> localVarResponse = EmailPasswordLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailPasswordLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthEmailPasswordLoginResponse> EmailPasswordLoginWithHttpInfo(AuthEmailPasswordLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EmailPasswordLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEmailPasswordLoginResponse>("/v1/auth/email-password/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailPasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailPasswordLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEmailPasswordLoginResponse> EmailPasswordLoginAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EmailPasswordLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthEmailPasswordLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthEmailPasswordLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Logs in the user based on the email and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailPasswordLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthEmailPasswordLoginResponse>> EmailPasswordLoginWithHttpInfoAsync(AuthEmailPasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EmailPasswordLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthEmailPasswordLoginResponse>("/v1/auth/email-password/login", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailPasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEpicLoginResponse</returns>
        public AuthEpicLoginResponse EpicLogin(AuthEpicLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthEpicLoginResponse> localVarResponse = EpicLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEpicLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthEpicLoginResponse> EpicLoginWithHttpInfo(AuthEpicLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EpicLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEpicLoginResponse>("/v1/auth/login/epic", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EpicLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEpicLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEpicLoginResponse> EpicLoginAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EpicLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthEpicLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthEpicLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Epic Login Logs in the user based on the epic credentials specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEpicLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthEpicLoginResponse>> EpicLoginWithHttpInfoAsync(AuthEpicLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EpicLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthEpicLoginResponse>("/v1/auth/login/epic", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EpicLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthFacebookLoginResponse</returns>
        public AuthFacebookLoginResponse FacebookLogin(AuthFacebookLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = FacebookLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthFacebookLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthFacebookLoginResponse> FacebookLoginWithHttpInfo(AuthFacebookLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->FacebookLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthFacebookLoginResponse>("/v1/auth/login/facebook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FacebookLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthFacebookLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthFacebookLoginResponse> FacebookLoginAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = FacebookLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthFacebookLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthFacebookLoginResponse>> FacebookLoginWithHttpInfoAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->FacebookLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthFacebookLoginResponse>("/v1/auth/login/facebook", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FacebookLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>AuthGetUsernameAvailabilityResponse</returns>
        public AuthGetUsernameAvailabilityResponse GetUsernameAvailability(string username)
        {
            Snapser.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> localVarResponse = GetUsernameAvailabilityWithHttpInfo(username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <returns>ApiResponse of AuthGetUsernameAvailabilityResponse</returns>
        public Snapser.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> GetUsernameAvailabilityWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'username' when calling AuthServiceApi->GetUsernameAvailability");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "username", username));


            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthGetUsernameAvailabilityResponse>("/v1/auth/username-password/availability", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsernameAvailability", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGetUsernameAvailabilityResponse</returns>
        public async System.Threading.Tasks.Task<AuthGetUsernameAvailabilityResponse> GetUsernameAvailabilityAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetUsernameAvailabilityWithHttpInfoAsync(username, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthGetUsernameAvailabilityResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Checks if the username is available
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username to check</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGetUsernameAvailabilityResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthGetUsernameAvailabilityResponse>> GetUsernameAvailabilityWithHttpInfoAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'username' when calling AuthServiceApi->GetUsernameAvailability");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "username", username));


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AuthGetUsernameAvailabilityResponse>("/v1/auth/username-password/availability", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsernameAvailability", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthGoogleLoginResponse</returns>
        public AuthGoogleLoginResponse GoogleLogin(AuthGoogleLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = GoogleLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthGoogleLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthGoogleLoginResponse> GoogleLoginWithHttpInfo(AuthGoogleLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->GoogleLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthGoogleLoginResponse>("/v1/auth/login/google", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GoogleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGoogleLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthGoogleLoginResponse> GoogleLoginAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GoogleLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGoogleLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthGoogleLoginResponse>> GoogleLoginWithHttpInfoAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->GoogleLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthGoogleLoginResponse>("/v1/auth/login/google", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GoogleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <returns>Object</returns>
        public Object Logout(string token, string token2)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = LogoutWithHttpInfo(token, token2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> LogoutWithHttpInfo(string token, string token2)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Logout");

            // verify the required parameter 'token2' is set
            if (token2 == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token2' when calling AuthServiceApi->Logout");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Snapser.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token2)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/auth/logout/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LogoutAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = LogoutWithHttpInfoAsync(token, token2, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> LogoutWithHttpInfoAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Logout");

            // verify the required parameter 'token2' is set
            if (token2 == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token2' when calling AuthServiceApi->Logout");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Snapser.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token2)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<Object>("/v1/auth/logout/{token}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object Otp(AuthOtpRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = OtpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> OtpWithHttpInfo(AuthOtpRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Otp");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/otp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Otp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OtpAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OtpWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> OtpWithHttpInfoAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Otp");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/auth/otp", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Otp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object RecoverEmailAccount(AuthRecoverEmailAccountRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = RecoverEmailAccountWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> RecoverEmailAccountWithHttpInfo(AuthRecoverEmailAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->RecoverEmailAccount");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/email-password/account-recovery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecoverEmailAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RecoverEmailAccountAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RecoverEmailAccountWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Sends an email to the user for account recovery
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> RecoverEmailAccountWithHttpInfoAsync(AuthRecoverEmailAccountRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->RecoverEmailAccount");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/auth/email-password/account-recovery", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecoverEmailAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>AuthRefreshResponse</returns>
        public AuthRefreshResponse Refresh(string token, AuthRefreshRequest body)
        {
            Snapser.Client.ApiResponse<AuthRefreshResponse> localVarResponse = RefreshWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthRefreshResponse</returns>
        public Snapser.Client.ApiResponse<AuthRefreshResponse> RefreshWithHttpInfo(string token, AuthRefreshRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Refresh");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Refresh");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AuthRefreshResponse>("/v1/auth/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthRefreshResponse</returns>
        public async System.Threading.Tasks.Task<AuthRefreshResponse> RefreshAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RefreshWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthRefreshResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthRefreshResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthRefreshResponse>> RefreshWithHttpInfoAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Refresh");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Refresh");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<AuthRefreshResponse>("/v1/auth/refresh", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        [Obsolete]
        public AuthSteamLoginResponse SteamLogin(AuthSteamLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = SteamLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        [Obsolete]
        public Snapser.Client.ApiResponse<AuthSteamLoginResponse> SteamLoginWithHttpInfo(AuthSteamLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->SteamLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthSteamLoginResponse>("/v1/auth/login/steam", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SteamLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<AuthSteamLoginResponse> SteamLoginAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SteamLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthSteamLoginResponse>> SteamLoginWithHttpInfoAsync(AuthSteamLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->SteamLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthSteamLoginResponse>("/v1/auth/login/steam", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SteamLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        public AuthSteamLoginResponse SteamOpenIdLogin(AuthSteamOpenIdLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = SteamOpenIdLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthSteamLoginResponse> SteamOpenIdLoginWithHttpInfo(AuthSteamOpenIdLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->SteamOpenIdLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthSteamLoginResponse>("/v1/auth/steam/openid/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SteamOpenIdLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthSteamLoginResponse> SteamOpenIdLoginAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SteamOpenIdLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam open ID token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthSteamLoginResponse>> SteamOpenIdLoginWithHttpInfoAsync(AuthSteamOpenIdLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->SteamOpenIdLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthSteamLoginResponse>("/v1/auth/steam/openid/login", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SteamOpenIdLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthSteamLoginResponse</returns>
        public AuthSteamLoginResponse SteamSessionTicketLogin(AuthSteamSessionTicketLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = SteamSessionTicketLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthSteamLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthSteamLoginResponse> SteamSessionTicketLoginWithHttpInfo(AuthSteamSessionTicketLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->SteamSessionTicketLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthSteamLoginResponse>("/v1/auth/steam/session-ticket/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SteamSessionTicketLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSteamLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthSteamLoginResponse> SteamSessionTicketLoginAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SteamSessionTicketLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthSteamLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Steam Login Logs in the user based on the steam session ticket specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSteamLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthSteamLoginResponse>> SteamSessionTicketLoginWithHttpInfoAsync(AuthSteamSessionTicketLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->SteamSessionTicketLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthSteamLoginResponse>("/v1/auth/steam/session-ticket/login", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SteamSessionTicketLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateEmailPassword(AuthUpdateEmailPasswordRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = UpdateEmailPasswordWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> UpdateEmailPasswordWithHttpInfo(AuthUpdateEmailPasswordRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->UpdateEmailPassword");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/email-password/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateEmailPasswordAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateEmailPasswordWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Updates the email and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> UpdateEmailPasswordWithHttpInfoAsync(AuthUpdateEmailPasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->UpdateEmailPassword");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<Object>("/v1/auth/email-password/password", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object UpdateUsernamePassword(string token, AuthUpdateUsernamePasswordRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = UpdateUsernamePasswordWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> UpdateUsernamePasswordWithHttpInfo(string token, AuthUpdateUsernamePasswordRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->UpdateUsernamePassword");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->UpdateUsernamePassword");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/username-password/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUsernamePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateUsernamePasswordAsync(string token, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateUsernamePasswordWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Updates the username and password of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> UpdateUsernamePasswordWithHttpInfoAsync(string token, AuthUpdateUsernamePasswordRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->UpdateUsernamePassword");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->UpdateUsernamePassword");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<Object>("/v1/auth/username-password/password", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUsernamePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthUsernamePasswordLoginResponse</returns>
        public AuthUsernamePasswordLoginResponse UsernamePasswordLogin(AuthUsernamePasswordLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthUsernamePasswordLoginResponse> localVarResponse = UsernamePasswordLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthUsernamePasswordLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthUsernamePasswordLoginResponse> UsernamePasswordLoginWithHttpInfo(AuthUsernamePasswordLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->UsernamePasswordLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthUsernamePasswordLoginResponse>("/v1/auth/username-password/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsernamePasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthUsernamePasswordLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthUsernamePasswordLoginResponse> UsernamePasswordLoginAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UsernamePasswordLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthUsernamePasswordLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthUsernamePasswordLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Username Password Login Logs in the user based on the username and password specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthUsernamePasswordLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthUsernamePasswordLoginResponse>> UsernamePasswordLoginWithHttpInfoAsync(AuthUsernamePasswordLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->UsernamePasswordLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthUsernamePasswordLoginResponse>("/v1/auth/username-password/login", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsernamePasswordLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthValidateResponse</returns>
        public AuthValidateResponse Validate(AuthValidateRequest body)
        {
            Snapser.Client.ApiResponse<AuthValidateResponse> localVarResponse = ValidateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthValidateResponse</returns>
        public Snapser.Client.ApiResponse<AuthValidateResponse> ValidateWithHttpInfo(AuthValidateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Validate");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthValidateResponse>("/v1/auth/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Validate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthValidateResponse</returns>
        public async System.Threading.Tasks.Task<AuthValidateResponse> ValidateAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ValidateWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthValidateResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthValidateResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthValidateResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthValidateResponse>> ValidateWithHttpInfoAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Validate");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AuthValidateResponse>("/v1/auth/validate", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Validate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthVerifyEmailResponse</returns>
        public AuthVerifyEmailResponse VerifyEmail(AuthVerifyEmailRequest body)
        {
            Snapser.Client.ApiResponse<AuthVerifyEmailResponse> localVarResponse = VerifyEmailWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthVerifyEmailResponse</returns>
        public Snapser.Client.ApiResponse<AuthVerifyEmailResponse> VerifyEmailWithHttpInfo(AuthVerifyEmailRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->VerifyEmail");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthVerifyEmailResponse>("/v1/auth/email-password/verification", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthVerifyEmailResponse</returns>
        public async System.Threading.Tasks.Task<AuthVerifyEmailResponse> VerifyEmailAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = VerifyEmailWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthVerifyEmailResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthVerifyEmailResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Password Login Verifies the email and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthVerifyEmailResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthVerifyEmailResponse>> VerifyEmailWithHttpInfoAsync(AuthVerifyEmailRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->VerifyEmail");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AuthVerifyEmailResponse>("/v1/auth/email-password/verification", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyEmail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthXboxLoginResponse</returns>
        public AuthXboxLoginResponse XboxLogin(AuthXboxLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthXboxLoginResponse> localVarResponse = XboxLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthXboxLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthXboxLoginResponse> XboxLoginWithHttpInfo(AuthXboxLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->XboxLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthXboxLoginResponse>("/v1/auth/login/xbox", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("XboxLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthXboxLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthXboxLoginResponse> XboxLoginAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = XboxLoginWithHttpInfoAsync(body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<AuthXboxLoginResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<AuthXboxLoginResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Xbox Login Logs in the user based on the xbox token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthXboxLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthXboxLoginResponse>> XboxLoginWithHttpInfoAsync(AuthXboxLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->XboxLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<AuthXboxLoginResponse>("/v1/auth/login/xbox", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("XboxLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
