/*
 * bot-one
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: bot-one: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AnalyticsBatchCreateEventResponse
    /// </summary>
    [DataContract(Name = "analyticsBatchCreateEventResponse")]
    public partial class AnalyticsBatchCreateEventResponse : IEquatable<AnalyticsBatchCreateEventResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsBatchCreateEventResponse" /> class.
        /// </summary>
        /// <param name="eventsFailed">Count of failed events.</param>
        /// <param name="eventsIngested">Count of events successfully ingested.</param>
        /// <param name="responses">List of responses for each event.</param>
        public AnalyticsBatchCreateEventResponse(long eventsFailed = default(long), long eventsIngested = default(long), List<AnalyticsBatchCreateEventSingleResponse> responses = default(List<AnalyticsBatchCreateEventSingleResponse>))
        {
            this.EventsFailed = eventsFailed;
            this.EventsIngested = eventsIngested;
            this.Responses = responses;
        }

        /// <summary>
        /// Count of failed events
        /// </summary>
        /// <value>Count of failed events</value>
        [DataMember(Name = "events_failed", EmitDefaultValue = false)]
        public long EventsFailed { get; set; }

        /// <summary>
        /// Count of events successfully ingested
        /// </summary>
        /// <value>Count of events successfully ingested</value>
        [DataMember(Name = "events_ingested", EmitDefaultValue = false)]
        public long EventsIngested { get; set; }

        /// <summary>
        /// List of responses for each event
        /// </summary>
        /// <value>List of responses for each event</value>
        [DataMember(Name = "responses", EmitDefaultValue = false)]
        public List<AnalyticsBatchCreateEventSingleResponse> Responses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyticsBatchCreateEventResponse {\n");
            sb.Append("  EventsFailed: ").Append(EventsFailed).Append("\n");
            sb.Append("  EventsIngested: ").Append(EventsIngested).Append("\n");
            sb.Append("  Responses: ").Append(Responses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsBatchCreateEventResponse);
        }

        /// <summary>
        /// Returns true if AnalyticsBatchCreateEventResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsBatchCreateEventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsBatchCreateEventResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventsFailed == input.EventsFailed ||
                    this.EventsFailed.Equals(input.EventsFailed)
                ) && 
                (
                    this.EventsIngested == input.EventsIngested ||
                    this.EventsIngested.Equals(input.EventsIngested)
                ) && 
                (
                    this.Responses == input.Responses ||
                    this.Responses != null &&
                    input.Responses != null &&
                    this.Responses.SequenceEqual(input.Responses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EventsFailed.GetHashCode();
                hashCode = (hashCode * 59) + this.EventsIngested.GetHashCode();
                if (this.Responses != null)
                {
                    hashCode = (hashCode * 59) + this.Responses.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
