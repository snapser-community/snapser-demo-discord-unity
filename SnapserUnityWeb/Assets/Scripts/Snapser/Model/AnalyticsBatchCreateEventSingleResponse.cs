/*
 * bot-one
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: bot-one: v2 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AnalyticsBatchCreateEventSingleResponse
    /// </summary>
    [DataContract(Name = "analyticsBatchCreateEventSingleResponse")]
    public partial class AnalyticsBatchCreateEventSingleResponse : IEquatable<AnalyticsBatchCreateEventSingleResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsBatchCreateEventSingleResponse" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="request">request.</param>
        /// <param name="success">success.</param>
        public AnalyticsBatchCreateEventSingleResponse(string message = default(string), AnalyticsGenericEvent request = default(AnalyticsGenericEvent), bool success = default(bool))
        {
            this.Message = message;
            this.Request = request;
            this.Success = success;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "request", EmitDefaultValue = false)]
        public AnalyticsGenericEvent Request { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyticsBatchCreateEventSingleResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyticsBatchCreateEventSingleResponse);
        }

        /// <summary>
        /// Returns true if AnalyticsBatchCreateEventSingleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyticsBatchCreateEventSingleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyticsBatchCreateEventSingleResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Request != null)
                {
                    hashCode = (hashCode * 59) + this.Request.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                return hashCode;
            }
        }

    }

}
