/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// CreateAppEventRequest
    /// </summary>
    [DataContract(Name = "CreateAppEvent_request")]
    public partial class CreateAppEventRequest : IEquatable<CreateAppEventRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAppEventRequest" /> class.
        /// </summary>
        /// <param name="createdAt">Epoch timestamp of event in seconds, if this and offset are not provided, it will be the request time.</param>
        /// <param name="properties">Key value pairs of the properties.</param>
        /// <param name="timeOffset">Time offset in seconds with server time.</param>
        public CreateAppEventRequest(long createdAt = default(long), Dictionary<string, string> properties = default(Dictionary<string, string>), long timeOffset = default(long))
        {
            this.CreatedAt = createdAt;
            this.Properties = properties;
            this.TimeOffset = timeOffset;
        }

        /// <summary>
        /// Epoch timestamp of event in seconds, if this and offset are not provided, it will be the request time
        /// </summary>
        /// <value>Epoch timestamp of event in seconds, if this and offset are not provided, it will be the request time</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// Key value pairs of the properties
        /// </summary>
        /// <value>Key value pairs of the properties</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Time offset in seconds with server time
        /// </summary>
        /// <value>Time offset in seconds with server time</value>
        [DataMember(Name = "time_offset", EmitDefaultValue = false)]
        public long TimeOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAppEventRequest {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  TimeOffset: ").Append(TimeOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAppEventRequest);
        }

        /// <summary>
        /// Returns true if CreateAppEventRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAppEventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAppEventRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.TimeOffset == input.TimeOffset ||
                    this.TimeOffset.Equals(input.TimeOffset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TimeOffset.GetHashCode();
                return hashCode;
            }
        }

    }

}
