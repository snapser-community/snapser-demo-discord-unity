openapi: 3.0.1
info:
  description: Your custom SDK
  title: basic-demo
  version: "basic-demo: v15 SDK"
servers:
- url: https://gateway-accel.snapser.com/q9n92w7o
tags:
- name: AuthService
paths:
  /v1/auth/app-verify/{type}:
    get:
      description: Verifies the session token and returns appropriate response based
        on the type
      operationId: AppVerify
      parameters:
      - description: Type of app trying to verify the session token. Only acceptable
          value is 'photon'
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      - description: Session token of the user
        explode: true
        in: query
        name: session_token
        required: false
        schema:
          type: string
        style: form
      - description: Shared secret used to verify the request
        explode: true
        in: query
        name: client_secret
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiHttpBody'
          description: A successful response.
      summary: Token
      tags:
      - AuthService
      x-require-auth: none
  /v1/auth/associate-logins:
    put:
      description: Associates two logins based on their session tokens
      operationId: AssociateLogins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAssociateLoginsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Associate Multiple Logins
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/anon:
    put:
      description: Logs in the user with an arbitrary identifier specified and returns
        a session
      operationId: AnonLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAnonLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authAnonLoginResponse'
          description: A successful response.
      summary: Anonymous Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/apple:
    put:
      description: Logs in the user based on the apple credential token specified
        and returns a session
      operationId: AppleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authAppleLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authAppleLoginResponse'
          description: A successful response.
      summary: Apple Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/email:
    put:
      description: Logs in the user based on the email and OTP specified and returns
        a session
      operationId: EmailLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEmailLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEmailLoginResponse'
          description: A successful response.
      summary: Email Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/epic:
    put:
      description: Logs in the user based on the epic credentials specified and returns
        a session
      operationId: EpicLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authEpicLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authEpicLoginResponse'
          description: A successful response.
      summary: Epic Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/facebook:
    put:
      description: Logs in the user based on the facebook credential token specified
        and returns a session
      operationId: FacebookLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authFacebookLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authFacebookLoginResponse'
          description: A successful response.
      summary: Facebook Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/google:
    put:
      description: Logs in the user based on the google credential token specified
        and returns a session
      operationId: GoogleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authGoogleLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGoogleLoginResponse'
          description: A successful response.
      summary: Google Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/steam:
    put:
      deprecated: true
      description: Logs in the user based on the steam token specified and returns
        a session
      operationId: SteamLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/login/xbox:
    put:
      description: Logs in the user based on the xbox token specified and returns
        a session
      operationId: XboxLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authXboxLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authXboxLoginResponse'
          description: A successful response.
      summary: Xbox Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/logout/{token}:
    delete:
      description: Ends the current session of the user
      operationId: Logout
      parameters:
      - description: Session token to logout
        explode: false
        in: path
        name: token
        required: true
        schema:
          type: string
        style: simple
      - description: Logged in user's session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Logout User
      tags:
      - AuthService
  /v1/auth/otp:
    post:
      description: Generates an OTP and sends it to the email for logging in
      operationId: Otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authOtpRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: A successful response.
      summary: Email Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/refresh:
    patch:
      description: Refreshes the session and returns a new session token with refreshed
        validity
      operationId: Refresh
      parameters:
      - description: Logged in user's session token
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authRefreshRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authRefreshResponse'
          description: A successful response.
      summary: Token
      tags:
      - AuthService
      x-codegen-request-body-name: body
  /v1/auth/steam/openid/login:
    put:
      description: Logs in the user based on the steam open ID token specified and
        returns a session
      operationId: SteamOpenIdLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamOpenIdLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/steam/session-ticket/login:
    put:
      description: Logs in the user based on the steam session ticket specified and
        returns a session
      operationId: SteamSessionTicketLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authSteamSessionTicketLoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authSteamLoginResponse'
          description: A successful response.
      summary: Steam Login
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
  /v1/auth/users:
    get:
      description: Get UserIDs by login IDs and login types
      operationId: GetUserIdsByLoginIds
      parameters:
      - description: Comma separated login IDs of the user to be retrieved
        explode: true
        in: query
        name: login_ids
        required: true
        schema:
          type: string
        style: form
      - description: "Login type to search by. Values must be one of 'email', 'anon',\
          \ 'apple', 'facebook', 'google', 'steam', 'xbox', 'epic'"
        explode: true
        in: query
        name: login_type
        required: true
        schema:
          type: string
        style: form
      - description: (app auth only)
        explode: false
        in: header
        name: Token
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authGetUserIdsByLoginIdsResponse'
          description: A successful response.
      summary: Get User Ids (App Auth)
      tags:
      - AuthService
      x-require-auth: api-key
  /v1/auth/validate:
    post:
      description: Validates the session of the user and returns the user info
      operationId: Validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authValidateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authValidateResponse'
          description: A successful response.
      summary: Token
      tags:
      - AuthService
      x-codegen-request-body-name: body
      x-require-auth: none
components:
  schemas:
    apiHttpBody:
      description: |-
        Message that represents an arbitrary HTTP body. It should only be used for
        payload formats that can't be represented as JSON, such as raw binary or
        an HTML page.


        This message can be used both in streaming and non-streaming API methods in
        the request as well as the response.

        It can be used as a top-level request field, which is convenient if one
        wants to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body.

        Example:

            message GetResourceRequest {
              // A unique request id.
              string request_id = 1;

              // The raw HTTP body is bound to this field.
              google.api.HttpBody http_body = 2;

            }

            service ResourceService {
              rpc GetResource(GetResourceRequest)
                returns (google.api.HttpBody);
              rpc UpdateResource(google.api.HttpBody)
                returns (google.protobuf.Empty);

            }

        Example with streaming methods:

            service CaldavService {
              rpc GetCalendar(stream google.api.HttpBody)
                returns (stream google.api.HttpBody);
              rpc UpdateCalendar(stream google.api.HttpBody)
                returns (stream google.api.HttpBody);

            }

        Use of this type only changes how the request and response bodies are
        handled, all other features will continue to work unchanged.
      example:
        extensions:
        - '@type': '@type'
        - '@type': '@type'
        content_type: content_type
        data: data
      properties:
        content_type:
          description: The HTTP Content-Type header value specifying the content type
            of the body.
          type: string
        data:
          description: The HTTP request/response body as raw binary.
          format: byte
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
        extensions:
          description: |-
            Application specific response metadata. Must be set in the first response
            for streaming APIs.
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
      type: object
    authAnonLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        username:
          description: User's login ID
          type: string
      required:
      - username
      type: object
    authAnonLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authAppleLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Apple token generated on the client
          type: string
      required:
      - token
      type: object
    authAppleLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authAssociateLoginsRequest:
      properties:
        discard_user_token:
          description: Token of the user to discard
          type: string
        keep_user_token:
          description: Token of the user to keep
          type: string
      required:
      - discard_user_token
      - keep_user_token
      type: object
    authEmailLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        email:
          description: Email address used as login
          type: string
        otp:
          description: OTP code received by the user
          type: string
      required:
      - email
      - otp
      type: object
    authEmailLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authEpicLoginRequest:
      properties:
        code:
          description: code generated on the client
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        exchange_code:
          description: exchange_code generated on the client
          type: string
        grant_type:
          description: token generated on the client
          type: string
        password:
          description: exchange_code generated on the client
          type: string
        username:
          description: exchange_code generated on the client
          type: string
      required:
      - grant_type
      type: object
    authEpicLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authFacebookLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Facebook token generated on the client
          type: string
      required:
      - token
      type: object
    authFacebookLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authGetUserIdsByLoginIdsResponse:
      example:
        user_ids:
          key: user_ids
      properties:
        user_ids:
          additionalProperties:
            type: string
          type: object
      type: object
    authGoogleLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        token:
          description: Google IDtoken generated on the client
          type: string
      required:
      - token
      type: object
    authGoogleLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authLoginTypeType:
      default: UNSPECIFIED_LOGIN_TYPE
      enum:
      - UNSPECIFIED_LOGIN_TYPE
      - EMAIL
      - PASSWORD
      - ANON
      - FACEBOOK
      - GOOGLE
      - APPLE
      - STEAM
      - XBOX
      - EPIC
      - APP
      type: string
    authOtpRequest:
      properties:
        email:
          description: Email address to send OTP to
          type: string
      required:
      - email
      type: object
    authRefreshRequest:
      properties:
        session_token:
          description: Session token to refresh
          type: string
      required:
      - session_token
      type: object
    authRefreshResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authSteamLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        openid_parameters:
          additionalProperties:
            type: string
          description: Key value pairs of the openid parameters
          type: object
      required:
      - openid_parameters
      type: object
    authSteamLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authSteamOpenIdLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        openid_parameters:
          additionalProperties:
            type: string
          description: Key value pairs of the openid parameters
          type: object
      required:
      - openid_parameters
      type: object
    authSteamSessionTicketLoginRequest:
      properties:
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        identity:
          description: Identity string used to generate session ticket (if applicable)
          type: string
        session_ticket:
          description: Session ticket generated on the client
          type: string
      required:
      - session_ticket
      type: object
    authUser:
      example:
        token_validity_seconds: 5
        created: true
        created_at: 0
        is_suspended: true
        is_verified: true
        first_login: 6
        tags:
        - tags
        - tags
        session_token: session_token
        refreshed_at: 1
        suspended_until: 5
        id: id
        is_banned: true
        login_types:
        - null
        - null
      properties:
        created:
          description: Whether user was created or not
          type: boolean
        created_at:
          description: Unix timestamp of when the user was created
          format: int64
          type: integer
        first_login:
          description: Unix timestamp of when the user was first logged in
          format: int64
          type: integer
        id:
          description: User ID for the user
          type: string
        is_banned:
          description: Whether user is banned or not
          type: boolean
        is_suspended:
          description: Whether user is suspended or not
          type: boolean
        is_verified:
          description: Whether user is verified or not
          type: boolean
        login_types:
          description: Login types
          items:
            $ref: '#/components/schemas/authLoginTypeType'
          type: array
        refreshed_at:
          description: Unix timestamp of when the session was last refreshed (If applicable)
          format: int64
          type: integer
        session_token:
          description: Session token of the user (If applicable)
          type: string
        suspended_until:
          description: Unix timestamp of when the user is suspended until
          format: int64
          type: integer
        tags:
          description: Different tags attached to the user like flagged
          items:
            type: string
          type: array
        token_validity_seconds:
          description: Validity of the token in seconds (If applicable)
          format: int64
          type: integer
      type: object
    authValidateRequest:
      properties:
        method:
          description: "HTTP method of the request to your backend (OPTIONAL: required\
            \ to validate user auth restrictions)"
          type: string
        path:
          description: "Path of the request to your backend (OPTIONAL: required to\
            \ validate user auth restrictions)"
          type: string
        session_token:
          description: Session token to validate
          type: string
      required:
      - session_token
      type: object
    authValidateResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    authXboxLoginRequest:
      properties:
        code:
          description: code generated on the client
          type: string
        create_user:
          description: "Whether to create a user, if it does not exist"
          type: boolean
        redirect_url:
          description: redirect url for client
          type: string
      required:
      - code
      - redirect_url
      type: object
    authXboxLoginResponse:
      example:
        user:
          token_validity_seconds: 5
          created: true
          created_at: 0
          is_suspended: true
          is_verified: true
          first_login: 6
          tags:
          - tags
          - tags
          session_token: session_token
          refreshed_at: 1
          suspended_until: 5
          id: id
          is_banned: true
          login_types:
          - null
          - null
      properties:
        user:
          $ref: '#/components/schemas/authUser'
      type: object
    protobufAny:
      additionalProperties:
        type: object
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      example:
        '@type': '@type'
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
x-original-swagger-version: "2.0"

